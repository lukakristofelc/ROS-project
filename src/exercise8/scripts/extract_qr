#!/usr/bin/python3

import roslib
# roslib.load_manifest('exercise4')
import sys
import rospy
import cv2
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from std_msgs.msg import ColorRGBA

import pyzbar.pyzbar as pyzbar

from urllib.request import urlopen
#Data manipulation
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import KNeighborsClassifier
import pandas as pd


dictm = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_6X6_250)

# The object that we will pass to the markerDetect function
params =  cv2.aruco.DetectorParameters_create()

print(params.adaptiveThreshConstant) 
print(params.adaptiveThreshWinSizeMax)
print(params.adaptiveThreshWinSizeMin)
print(params.minCornerDistanceRate)
print(params.adaptiveThreshWinSizeStep)

# To see description of the parameters
# https://docs.opencv.org/3.3.1/d1/dcd/structcv_1_1aruco_1_1DetectorParameters.html

# You can set these parameters to get better marker detections
params.adaptiveThreshConstant = 25
adaptiveThreshWinSizeStep = 2


class QRExtractor:
    def __init__(self):
        rospy.init_node('image_converter', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # Subscribe to the image and/or depth topic
        self.image_sub = rospy.Subscriber("/camera/rgb/image_raw", Image, self.image_callback)

    def image_callback(self,data):
        # Scaler
        #scaler = MinMaxScaler()

        # KNN classifier
        knn = KNeighborsClassifier(n_neighbors=9) #9 je kr dobr, pa 7 tudi

        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)
                    
            # Find a QR code in the image
        decodedObjects = pyzbar.decode(cv_image)
        
        #print(decodedObjects)
        
        if len(decodedObjects) == 1:
            dObject = decodedObjects[0]
            data = dObject.data.decode("utf-8")
            print("Found 1 QR code in the image!")
            #print("Data: ", data,'\n')
            # Data from URL
            f = urlopen(data)
            myfile = f.read()
            dataURL = (myfile.decode("utf-8")).splitlines()
            array = []
            for d in dataURL:
                array.append(d.split(','))

            if len(dataURL)>1:
                #print("Data from URL: ", dataURL[1],'\n')
                age = 100.0
                exercise = 40.0
                dataFrame = pd.DataFrame(array, columns=['age', 'exerciseHours', 'vaccine'])
                #print(dataFrame)
                feature_names = ['age', 'exerciseHours']
                X = dataFrame[feature_names]
                y = dataFrame['vaccine']
                #X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
                #X_train = scaler.fit_transform(X)
                #X_test = scaler.transform([[19.19, 22.04]])
                knn.fit(X, y)
                #print('Accuracy of K-NN classifier on training set: {:.2f}'.format(knn.score(X_train, y_train)))
                #print('Accuracy of K-NN classifier on test set: {:.2f}'.format(knn.score(X_test, y_test)))
                # Predict the right vaccine
                vaccine = knn.predict([[age, exercise]])
                print(vaccine[0])

            
            # Visualize the detected QR code in the image
            points  = dObject.polygon
            if len(points) > 4 : 
                hull = cv2.convexHull(np.array([point for point in points], dtype=np.float32))
                hull = list(map(tuple, np.squeeze(hull)))
            else : 
                hull = points
             
            ## Number of points in the convex hull
            n = len(hull)
         
            ## Draw the convext hull
            for j in range(0,n):
                cv2.line(cv_image, hull[j], hull[ (j+1) % n], (0,255,0), 2)
                
            cv2.imshow('Warped image',cv_image)
            cv2.waitKey(1)
                
        elif len(decodedObjects)==0:
            print("No QR code in the image")
        else:
            print("Found more than 1 QR code")


def main(args):

    qre = QRExtractor()

    rate = rospy.Rate(1)
    while not rospy.is_shutdown():
        rate.sleep()

    cv2.destroyAllWindows()


if __name__ == '__main__':
    main(sys.argv)
